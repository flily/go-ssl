package asn1

import (
	"math/big"
	"testing"

	"bytes"
)

func TestBooleanEncoding(t *testing.T) {
	cases := []struct {
		value    bool
		expected []byte
	}{
		{true, []byte{0x01, 0x01, 0xff}},
		{false, []byte{0x01, 0x01, 0x00}},
	}

	buffer := make([]byte, 10)
	for _, c := range cases {
		b0 := NewBoolean(c.value)
		wNext, err := WriteASN1Objects(buffer, 0, b0)
		if err != nil {
			t.Errorf("unexpected error '%v' on case: %+v", err, c.value)
		}

		if wNext != len(c.expected) {
			t.Errorf("wrong next offset %d returned, expected %d, case: %+v",
				wNext, len(c.expected), c.value)
		}

		if !bytes.Equal(buffer[:wNext], c.expected) {
			t.Errorf("wrong encoding result: %x, expected %x, case: %+v",
				buffer[:wNext], c.expected, c.value)
		}

		results, rNext, err := ReadASN1Objects(buffer, 0, wNext)
		if err != nil {
			t.Errorf("unexpected error '%v' on case: %+v", err, c.value)
		}

		if rNext != wNext {
			t.Errorf("wrong next offset %d returned, expected %d, case: %+v",
				rNext, wNext, c.value)
		}

		if len(results) != 1 {
			t.Errorf("wrong number of objects parsed: %d, expected 1", len(results))
		}

		b1, typeOk := results[0].(*ASN1Boolean)
		if !typeOk {
			t.Errorf("wrong type parsed: %T, expected *ASN1Boolean", results[0])
			continue
		}

		if b1 == nil {
			t.Errorf("nil object parsed")
			continue
		}

		if *b1 != *b0 {
			t.Errorf("wrong content parsed: %+v, expected %+v", b1, b0)
		}
	}
}

func TestIntegerEncoding(t *testing.T) {
	cases := []struct {
		value    string
		expected []byte
	}{
		{"0", []byte{0x02, 0x01, 0x00}},
		{"2", []byte{0x02, 0x01, 0x02}},
		{"65537", []byte{0x02, 0x03, 0x01, 0x00, 0x01}},
		{
			"660120406528392010727777090606429476144773442509892602153340612912441438508344516" +
				"5102057553180206149348965242768485",
			[]byte{
				0x02, 0x30,
				0x2a, 0xe3, 0x8e, 0x2e, 0x39, 0xb0, 0x1a, 0x0b,
				0x63, 0x1b, 0xa4, 0x80, 0x48, 0x5e, 0x16, 0xd9,
				0xef, 0x0a, 0xb5, 0x06, 0x40, 0x35, 0x1b, 0x18,
				0x5c, 0xc5, 0xc9, 0x0c, 0x6c, 0x01, 0x0a, 0x2f,
				0x5f, 0x33, 0xb4, 0x32, 0x4b, 0xd7, 0x6f, 0x94,
				0x52, 0xf0, 0xad, 0xc0, 0xe0, 0xd6, 0x0c, 0x65,
			},
		},
		{
			"353209003965517638468589608377663767683273299268719472909261807022798720986911776" +
				"42687624258287709119380894217091237",
			[]byte{
				0x02, 0x31,
				0x00, 0xe5, 0x7c, 0x09, 0x8a, 0x46, 0xe9, 0x93,
				0xfa, 0xb2, 0x41, 0xea, 0xf3, 0x79, 0x4b, 0x29,
				0xb9, 0x92, 0xa1, 0xaa, 0x1d, 0x4a, 0x3e, 0xe8,
				0xf6, 0xb8, 0x17, 0x69, 0xf2, 0xf8, 0x9c, 0xb8,
				0x1c, 0x6e, 0x4c, 0x95, 0x1d, 0xd5, 0x6f, 0x9d,
				0xdc, 0xb9, 0xa2, 0x90, 0xe5, 0x20, 0x1b, 0x38,
				0xa5,
			},
		},
		{
			"6695814610104036211793592997870637049083589535675104019905750175117497964532761446" +
				"468004475813973420574310134813450491778693387470100698728151861947254334620401" +
				"097320905995334795915495859856952442062056113343674468171130854200201156996615" +
				"5349300963739429300700054194553129412873246026691113207997143221212497",
			[]byte{
				0x02, 0x81, 0x80,
				0x5f, 0x5a, 0x00, 0x2b, 0xfe, 0x85, 0x0b, 0x7b,
				0xe3, 0x8f, 0xf8, 0xb5, 0x8a, 0xd7, 0x0a, 0x26,
				0xf6, 0x1d, 0x01, 0x2b, 0x76, 0xdd, 0xde, 0x63,
				0x02, 0x5b, 0xd0, 0xb3, 0xc4, 0x20, 0x95, 0xda,
				0x3d, 0x1d, 0x25, 0xdd, 0x1a, 0x0a, 0x33, 0x7a,
				0xdf, 0xa3, 0x95, 0xe1, 0x26, 0x58, 0x06, 0x40,
				0xba, 0xac, 0x2c, 0x97, 0x7c, 0x91, 0xb9, 0xc0,
				0xe9, 0x56, 0x86, 0x55, 0x41, 0x45, 0x03, 0xf5,
				0x86, 0xce, 0xd6, 0xbe, 0x3d, 0x5d, 0x75, 0x4e,
				0x84, 0x88, 0x35, 0xe6, 0x1f, 0xac, 0x5e, 0x20,
				0x76, 0x73, 0x7b, 0x1f, 0x58, 0x05, 0xed, 0x20,
				0xdf, 0xf4, 0x8e, 0xc0, 0xa4, 0xe3, 0x4f, 0xab,
				0xa9, 0x41, 0x3b, 0x14, 0x28, 0x4b, 0x60, 0x82,
				0x21, 0x3d, 0x7c, 0x08, 0x12, 0xd8, 0xba, 0xce,
				0x78, 0xef, 0x39, 0x60, 0x88, 0x00, 0x94, 0x64,
				0xc8, 0x09, 0x12, 0xd7, 0x13, 0x03, 0x15, 0x51,
			},
		},
		{
			"2076434303926007856479564449923394134485868723776758446768530654947637873098669223" +
				"460556177522198917471694641770668495559848847551284187145208214850505172824515" +
				"359640808143686524335626761556582708110957842368385743444728019135505982072821" +
				"227887459571848751506135582330123115818725116288570863513286220046708300782536" +
				"643917684623142390410213142716248679321025477025877890544182289958643371668116" +
				"435243605897325406347047383917055702325722167382884367390340874037683999868986" +
				"889832233430597156251230564803541036535186902001425631140898835969350647683406" +
				"2162743905435454159924702508168257724275603108802162899690472042667",
			[]byte{
				0x02, 0x82, 0x01, 0x01,
				0x00, 0xa4, 0x7c, 0x3b, 0x5c, 0xb2, 0x39, 0x11,
				0x35, 0xba, 0xcd, 0x4e, 0xbb, 0xe7, 0x10, 0x90,
				0x54, 0x9c, 0x69, 0x6b, 0xe3, 0x63, 0xde, 0x01,
				0x92, 0x74, 0xe0, 0x73, 0xbe, 0xaf, 0xaa, 0x6b,
				0xe3, 0x96, 0xe0, 0x08, 0xa5, 0x69, 0x73, 0x00,
				0xa0, 0x5a, 0x47, 0x0c, 0x8c, 0xfb, 0x3b, 0x65,
				0x58, 0x91, 0x17, 0x2d, 0xed, 0xf4, 0x28, 0x2d,
				0x94, 0xcc, 0x31, 0x51, 0x8a, 0xfe, 0xd9, 0x1c,
				0x8d, 0x38, 0x9d, 0x9c, 0x90, 0x90, 0x97, 0x94,
				0xf4, 0x78, 0x58, 0x23, 0x40, 0x8b, 0x28, 0xcf,
				0xec, 0x0e, 0x35, 0x32, 0x24, 0xf7, 0xe1, 0x34,
				0x75, 0x87, 0xb3, 0xe5, 0x63, 0xe3, 0xfa, 0x8a,
				0x58, 0x6e, 0xf3, 0x15, 0x28, 0x8f, 0xd5, 0xc6,
				0xbc, 0xd5, 0xa6, 0x1c, 0x26, 0xe6, 0xd4, 0xe3,
				0xe1, 0x80, 0xf2, 0x25, 0x24, 0xf7, 0xe1, 0x85,
				0xb7, 0xa3, 0x4d, 0x5d, 0x56, 0xfa, 0x4c, 0xa4,
				0x9a, 0xcb, 0xcb, 0x79, 0x1b, 0xc8, 0xc9, 0x3c,
				0x88, 0x45, 0x67, 0x67, 0xed, 0x44, 0x8c, 0x3c,
				0x61, 0x15, 0x7a, 0xe7, 0x56, 0xba, 0x75, 0x6a,
				0xf5, 0xf1, 0x58, 0xbd, 0xcd, 0x62, 0x03, 0x14,
				0x61, 0xae, 0x8a, 0x15, 0x96, 0x78, 0x94, 0x9d,
				0xf3, 0xd9, 0x0f, 0x43, 0x9b, 0xda, 0x7e, 0xa6,
				0x61, 0xad, 0x24, 0x48, 0x0e, 0x80, 0x0e, 0x7b,
				0x65, 0x1e, 0x8c, 0x3d, 0x03, 0xdf, 0xd3, 0x84,
				0x4e, 0xdd, 0xa8, 0xe1, 0x75, 0x56, 0x79, 0x2a,
				0xcc, 0xae, 0xff, 0xae, 0x7d, 0xc9, 0x7b, 0x9f,
				0x7c, 0x6a, 0x85, 0x35, 0xa6, 0x96, 0xd5, 0x11,
				0xb3, 0x14, 0xed, 0xf1, 0xe3, 0x05, 0xfc, 0xe5,
				0xb4, 0x7e, 0x67, 0x27, 0xb2, 0xfc, 0xd5, 0x1f,
				0xe4, 0xf0, 0x67, 0x2d, 0x2b, 0x95, 0xe9, 0x02,
				0x49, 0xf0, 0xa8, 0x3c, 0x3d, 0xca, 0x6b, 0x78,
				0x94, 0x7d, 0xf7, 0xdf, 0xe2, 0x8e, 0x63, 0x70,
				0xab,
			},
		},
	}

	buffer := make([]byte, 500)
	for _, c := range cases {
		num := big.NewInt(0)
		_, ok := num.SetString(c.value, 10)
		if !ok {
			t.Fatalf("failed to parse number: %s", c.value)
		}

		i0 := NewInteger(num)
		wNext, err := WriteASN1Objects(buffer, 0, i0)
		if err != nil {
			t.Errorf("unexpected error '%v' on case: %+v", err, c.value)
		}

		if wNext != len(c.expected) {
			t.Errorf("wrong next offset %d returned, expected %d, case: %+v",
				wNext, len(c.expected), c.value)
		}

		if !bytes.Equal(buffer[:wNext], c.expected) {
			t.Errorf("wrong encoding result: %x, expected %x, case: %+v",
				buffer[:wNext], c.expected, c.value)
		}

		results, rNext, err := ReadASN1Objects(buffer, 0, wNext)
		if err != nil {
			t.Errorf("unexpected error '%v' on case: %+v", err, c.value)
		}

		if rNext != wNext {
			t.Errorf("wrong next offset %d returned, expected %d, case: %+v",
				rNext, wNext, c.value)
		}

		if len(results) != 1 {
			t.Errorf("wrong number of objects parsed: %d, expected 1", len(results))
		}

		i1, typeOk := results[0].(*ASN1Integer)
		if !typeOk {
			t.Errorf("wrong type parsed: %T, expected *ASN1Integer", results[0])
			continue
		}

		if i1 == nil {
			t.Errorf("nil object parsed")
			continue
		}

		if !i1.Equal(i0) {
			t.Errorf("wrong content parsed: %+v, expected %+v", i1, i0)
		}
	}
}
